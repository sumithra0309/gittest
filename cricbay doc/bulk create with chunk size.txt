
class BulkCreateManager(object):

    def __init__(self, chunk_size=100):
        self._create_queues = defaultdict(list)
        self.chunk_size = chunk_size

    def _commit(self, model_class):
        model_key = model_class._meta.label
        model_class.objects.bulk_create(self._create_queues[model_key])
        self._create_queues[model_key] = []

    def add(self, obj):
        model_class = type(obj)
        model_key = model_class._meta.label
        self._create_queues[model_key].append(obj)
        if len(self._create_queues[model_key]) >= self.chunk_size:
            self._commit(model_class)

    def done(self):
        for model_name, objs in self._create_queues.items():
            if len(objs) > 0:
                self._commit(apps.get_model(model_name))


class ImportNewGamePublishAPI(APIView):
    """ This API is for New Game Publish Information"""

    def post(self, request):
        data = request.data.get('data')
        bulk_mgr = BulkCreateManager(chunk_size=20)
        for _data in data:
                bulk_mgr.add(matches(game_stage_id=_data['game_stage'], match_date=_data['match_date'], home_team_id=_data['home_team'], away_team_id=_data['away_team'],
                                     umpire1_team_id=_data['ump1_team'], umpire2_team_id=_data['ump2_team'], ground_id=_data['ground_id'], max_overs_played=_data['max_overs'],
                                     number_of_pp_overs=_data['number_of_pp_overs'], max_overs_per_bowler=_data['max_overs_per_bowler'], ground_charge=_data['ground_charge']))
                bulk_mgr.done()
        return Response(status=status.HTTP_200_OK)